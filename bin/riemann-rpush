#!/usr/bin/env ruby

# Riemann agent to collect Rpush metrics

require 'redis'
require 'riemann/tools'

class Riemann::Tools::Rpush
  include Riemann::Tools

  opt :redis_url, "Redis URL", :default => ''
  opt :queue_size_warning, "Queue size warning threshold",   :type => Integer, :default => 20
  opt :queue_size_critical, "Queue size critical threshold", :type => Integer, :default => 100

  def initialize
    @redis = ::Redis.new({url: opts[:redis_url]})
    @queue_size_warning = opts.fetch(:queue_size_warning)
    @queue_size_critical = opts.fetch(:queue_size_critical)
  end

  def tick
    keys = @redis.smembers('rpush:notifications:all')

    types_count(keys).each_pair do |type, count|
      deliver_type_count(type, count)
    end

    deliver_total(keys.size)
  end

  private
  def types_count(keys)
    keys.inject({}) |h, key|
      type = get_notification_type(key)
      if type
        h[type] ||= 0
        h[type] += 1
      end
      h
    end
  end

  def get_notification_type(key)
    type = @redis.hget("rpush:notifications:#{key}", 'type')
    type.encode("UTF-8", invalid: :replace, replace: '').match(/Redis::(.*)::Notification/)[1].downcase
  rescue
    nil
  end

  def deliver_total(total)
    state = if total >= @queue_size_critical
      'critical'
    elsif total >= @queue_size_warning
      'warning'
    else
      'ok'
    end

    msg = {
      metric: total,
      service: 'rpush queue size',
      state: state
    }
    report msg
  end

  def deliver_type_count(type, count)
    state = if count >= @queue_size_critical
      'critical'
    elsif count >= @queue_size_warning
      'warning'
    else
      'ok'
    end

    msg = {
      metric: count,
      service: "rpush #{type}-queue size",
      state: state
    }
    report msg
  end
end

Riemann::Tools::Rpush.run
